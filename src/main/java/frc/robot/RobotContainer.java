
package frc.robot;

import frc.robot.Constants.XboxConstants;
import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.Field2d;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.kauailabs.navx.frc.*;
import edu.wpi.first.wpilibj.SPI;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.ConditionalCommand;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.ParallelCommandGroup;
import edu.wpi.first.wpilibj2.command.PrintCommand;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import edu.wpi.first.wpilibj2.command.WaitCommand;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.XboxController;

public class RobotContainer {
  AHRS ahrs = new AHRS(SPI.Port.kMXP);
  private static RobotContainer m_robotContainer = new RobotContainer();
  // The robot's subsystems
  public final Drivetrain m_drivetrain = new Drivetrain();
  // public final Arm m_arm = new Arm();
  public final ArmSystem m_armSystem = new ArmSystem();
  
  public final Climber m_climber = new Climber();
  public final Intake m_intake = new Intake();
  public final Field2d m_field = new Field2d();

  // Joysticks
  private final XboxController xboxController1 = new XboxController(0);

  // Arm Commands
  // public static ArmUp armup = new ArmUp

  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  private RobotContainer() {
    // Smartdashboard Subsystems
    SmartDashboard.putData(m_drivetrain);
    // SmartDashboard.putData(m_arm);
    SmartDashboard.putData(m_armSystem);
    
    SmartDashboard.putData(m_climber);
    ;
    SmartDashboard.putBoolean(  "IMU_Connected",        ahrs.isConnected());
    SmartDashboard.putBoolean(  "IMU_IsCalibrating",    ahrs.isCalibrating());
    SmartDashboard.putNumber(   "IMU_Yaw",              ahrs.getYaw());
    SmartDashboard.putNumber(   "IMU_Pitch",            ahrs.getPitch());
    SmartDashboard.putNumber(   "IMU_Roll",             ahrs.getRoll());
    
    /* Display tilt-corrected, Magnetometer-based heading (requires             */
    /* magnetometer calibration to be useful)                                   */
    
    SmartDashboard.putNumber(   "IMU_CompassHeading",   ahrs.getCompassHeading());
    
    /* Display 9-axis Heading (requires magnetometer calibration to be useful)  */
    SmartDashboard.putNumber(   "IMU_FusedHeading",     ahrs.getFusedHeading());

    /* These functions are compatible w/the WPI Gyro Class, providing a simple  */
    /* path for upgrading from the Kit-of-Parts gyro to the navx-MXP            */
    
    SmartDashboard.putNumber(   "IMU_TotalYaw",         ahrs.getAngle());
    SmartDashboard.putNumber(   "IMU_YawRateDPS",       ahrs.getRate());

    /* Display Processed Acceleration Data (Linear Acceleration, Motion Detect) */
    
    SmartDashboard.putNumber(   "IMU_Accel_X",          ahrs.getWorldLinearAccelX());
    SmartDashboard.putNumber(   "IMU_Accel_Y",          ahrs.getWorldLinearAccelY());
    SmartDashboard.putBoolean(  "IMU_IsMoving",         ahrs.isMoving());
    SmartDashboard.putBoolean(  "IMU_IsRotating",       ahrs.isRotating());

    /* Display estimates of velocity/displacement.  Note that these values are  */
    /* not expected to be accurate enough for estimating robot position on a    */
    /* FIRST FRC Robotics Field, due to accelerometer noise and the compounding */
    /* of these errors due to single (velocity) integration and especially      */
    /* double (displacement) integration.                                       */
    
    SmartDashboard.putNumber(   "Velocity_X",           ahrs.getVelocityX());
    SmartDashboard.putNumber(   "Velocity_Y",           ahrs.getVelocityY());
    SmartDashboard.putNumber(   "Displacement_X",       ahrs.getDisplacementX());
    SmartDashboard.putNumber(   "Displacement_Y",       ahrs.getDisplacementY());
    
    /* Display Raw Gyro/Accelerometer/Magnetometer Values                       */
    /* NOTE:  These values are not normally necessary, but are made available   */
    /* for advanced users.  Before using this data, please consider whether     */
    /* the processed data (see above) will suit your needs.                     */
    
    SmartDashboard.putNumber(   "RawGyro_X",            ahrs.getRawGyroX());
    SmartDashboard.putNumber(   "RawGyro_Y",            ahrs.getRawGyroY());
    SmartDashboard.putNumber(   "RawGyro_Z",            ahrs.getRawGyroZ());
    SmartDashboard.putNumber(   "RawAccel_X",           ahrs.getRawAccelX());
    SmartDashboard.putNumber(   "RawAccel_Y",           ahrs.getRawAccelY());
    SmartDashboard.putNumber(   "RawAccel_Z",           ahrs.getRawAccelZ());
    SmartDashboard.putNumber(   "RawMag_X",             ahrs.getRawMagX());
    SmartDashboard.putNumber(   "RawMag_Y",             ahrs.getRawMagY());
    SmartDashboard.putNumber(   "RawMag_Z",             ahrs.getRawMagZ());
    SmartDashboard.putNumber(   "IMU_Temp_C",           ahrs.getTempC());
    
    /* Omnimount Yaw Axis Information                                           */
    /* For more info, see http://navx-mxp.kauailabs.com/installation/omnimount  */
    AHRS.BoardYawAxis yaw_axis = ahrs.getBoardYawAxis();
    SmartDashboard.putString(   "YawAxisDirection",     yaw_axis.up ? "Up" : "Down" );
    SmartDashboard.putNumber(   "YawAxis",              yaw_axis.board_axis.getValue() );
    
    /* Sensor Board Information                                                 */
    SmartDashboard.putString(   "FirmwareVersion",      ahrs.getFirmwareVersion());
    
    /* Quaternion Data                                                          */
    /* Quaternions are fascinating, and are the most compact representation of  */
    /* orientation data.  All of the Yaw, Pitch and Roll Values can be derived  */
    /* from the Quaternions.  If interested in motion processing, knowledge of  */
    /* Quaternions is highly recommended.                                       */
    SmartDashboard.putNumber(   "QuaternionW",          ahrs.getQuaternionW());
    SmartDashboard.putNumber(   "QuaternionX",          ahrs.getQuaternionX());
    SmartDashboard.putNumber(   "QuaternionY",          ahrs.getQuaternionY());
    SmartDashboard.putNumber(   "QuaternionZ",          ahrs.getQuaternionZ());
    
    /* Connectivity Debugging Support                                           */
    SmartDashboard.putNumber(   "IMU_Byte_Count",       ahrs.getByteCount());
    SmartDashboard.putNumber(   "IMU_Update_Count",     ahrs.getUpdateCount());
    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    // SmartDashboard.putData("ArcadeDrive", new ArcadeDrive());
   

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    

    m_drivetrain.setDefaultCommand(new ArcadeDrive(m_drivetrain,
        () -> -xboxController1.getRawAxis(XboxConstants.LEFT_STICK_Y),
        () -> xboxController1.getRawAxis(XboxConstants.RIGHT_STICK_X)));
    // m_arm.setDefaultCommand(new ArmMovement(m_arm, 0));
    m_intake.setDefaultCommand(new BallSuckSpit(m_intake, 0));

    CommandBase position1=  new SequentialCommandGroup(
      //new ArmUp(m_armSystem),
      (new BallSuckSpit(m_intake, 1)).withTimeout(0.5),
      (new BallSuckSpit(m_intake, 0)).withTimeout(1),
      new Autonomous(-0.25, 4, m_drivetrain),
      new Autonomous(0, 10, m_drivetrain)
  );
  m_chooser.addOption("position1", position1);

  // CommandBase position2=  new SequentialCommandGroup(
  //   new ArmDown(m_armSystem),
  //   new Autonomous(0.5, 1, m_drivetrain),
  //   new ParallelCommandGroup(

  //     new Autonomous(0.1, 0.5, m_drivetrain),


  //     new BallSuckSpit(m_intake, 1.0)
  //   ),
  //   new Autonomous(-0.5, 2, m_drivetrain),
  //   new TurnNdegrees(-135, m_drivetrain),
  //   new ArmUp(m_armSystem),
  //   new Autonomous(0.2, 0.3, m_drivetrain),
  //   new BallSuckSpit(m_intake, -%0.5)
  // );
  // m_chooser.addOption("position2", position2);
  SmartDashboard.putData("Auton", m_chooser);
  try{
  CameraServer.startAutomaticCapture(1);
  }catch(Exception ex1){
    System.out.println("Camera not found");

  }
  setAngle(240, ahrs.getAngle());
  CameraServer.startAutomaticCapture();
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Button bindings go below
   */
  private void configureButtonBindings() {

    // XboxController()

    // xboxController1.getRawButton(A_BUTTON);

    // new JoystickButton(xboxController1, XboxConstants.RIGHT_BUMPER).whenHeld(new
    // ArmMovement(m_arm, 0.5)); // needs to be fixed
    // new JoystickButton(xboxController1, XboxConstants.LEFT_BUMPER).whenHeld(new
    // ArmMovement(m_arm, -0.5));
    new JoystickButton(xboxController1, XboxConstants.B_BUTTON).whenHeld(new BallSuckSpit(m_intake, 0.9));
    new JoystickButton(xboxController1, XboxConstants.X_BUTTON).whenHeld(new BallSuckSpit(m_intake, -0.5));
    // new JoystickButton(xboxController1, XboxConstants.Y_BUTTON).whenHeld(new Autonomous(.30, 5, m_drivetrain));

    new JoystickButton(xboxController1, XboxConstants.RIGHT_BUMPER).whenPressed(new ConditionalCommand(new ArmUp(m_armSystem), new PrintCommand("Arm Already Up"), m_armSystem::armIsDown),false);                                                                                                 
    new JoystickButton(xboxController1, XboxConstants.LEFT_BUMPER).whenPressed(new ConditionalCommand(new ArmDown(m_armSystem), new PrintCommand("Arm Is Already Down"), m_armSystem::armIsUp),false);
  }

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  public XboxController getXboxController1() {
    return xboxController1;
  }

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
     return m_chooser.getSelected();

    //return new Autonomous(.5, 10, m_drivetrain);
  
 
  
  }

  
  public void disabledInit() {
    // Reset the arm to up... otherwise it could start in the down direction
    m_armSystem.armDisabled();

  }

  
  public void enabledInit() {
    m_armSystem.armEnabled();
  }
  public void setAngle(double targetAngle, double currentAngle){
      currentAngle = ahrs.getAngle();
      if (currentAngle >= targetAngle - 20 && currentAngle <= targetAngle + 20){
        System.out.println("Within Target Angle");
      }
      else {
        System.out.println("Not Within Target Angle");
      }
}

}
